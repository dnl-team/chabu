import { timestamp, files, shell, routes } from '@sapper/service-worker'
import { Store, set, get } from 'idb-keyval'
// import MD5 from 'crypto-js/md5'

const ASSETS = `cache${timestamp}`

// `shell` is an array of all the files generated by the bundler,
// `files` is an array of everything in the `static` directory
const to_cache = shell.concat(files)
const cached = new Set(to_cache)

const store = new Store('GraphQL_Cache', 'Post_Responses')

self.addEventListener('install', event => {
  event.waitUntil(
    caches
      .open(ASSETS)
      .then(cache => cache.addAll(to_cache))
      .then(() => {
        self.skipWaiting()
      }),
  )
})

self.addEventListener('activate', event => {
  event.waitUntil(
    caches.keys().then(async keys => {
      // delete old caches
      for (const key of keys) {
        if (key !== ASSETS) await caches.delete(key)
      }

      self.clients.claim()
    }),
  )
})

self.addEventListener('fetch', event => {
  if (
    event.request.method === 'POST' &&
    event.request.url ===
      process.env.GRAPHQL_ENDPOINT
  ) {
    event.respondWith(staleWhileRevalidate(event))
  }

  if (event.request.method !== 'GET' || event.request.headers.has('range'))
    return

  const url = new URL(event.request.url)

  // don't try to handle e.g. data: URIs
  if (!url.protocol.startsWith('http')) return

  // ignore dev server requests
  if (
    url.hostname === self.location.hostname &&
    url.port !== self.location.port
  )
    return

  // always serve static files and bundler-generated assets from cache
  if (url.host === self.location.host && cached.has(url.pathname)) {
    event.respondWith(caches.match(event.request))
    return
  }

  // for pages, you might want to serve a shell `index.html` file,
  // which Sapper has generated for you. It's not right for every
  // app, but if it's right for yours then uncomment this section
  /*
	if (url.origin === self.origin && routes.find(route => route.pattern.test(url.pathname))) {
		event.respondWith(caches.match('/index.html'));
		return;
	}
	*/

  if (event.request.cache === 'only-if-cached') return

  // for everything else, try the network first, falling back to
  // cache if the user is offline. (If the pages never change, you
  // might prefer a cache-first approach to a network-first one.)
  event.respondWith(
    caches.open(`offline${timestamp}`).then(async cache => {
      try {
        const response = await fetch(event.request)
        cache.put(event.request, response.clone())
        return response
      } catch (err) {
        const response = await cache.match(event.request)
        if (response) return response

        throw err
      }
    }),
  )
})

async function staleWhileRevalidate(event) {
  let promise = null
  let cachedResponse = await getCache(event.request.clone())
  let fetchPromise = fetch(event.request.clone())
    .then(response => {
      setCache(event.request.clone(), response.clone())
      return response
    })
    .catch(err => {
      console.error(err)
    })
  return cachedResponse ? Promise.resolve(cachedResponse) : fetchPromise
}

async function serializeResponse(response) {
  let serializedHeaders = {}
  for (var entry of response.headers.entries()) {
    serializedHeaders[entry[0]] = entry[1]
  }
  let serialized = {
    headers: serializedHeaders,
    status: response.status,
    statusText: response.statusText,
  }
  serialized.body = await response.json()
  return serialized
}

async function setCache(request, response) {
  var key, data
  let body = await request.json()
  let id = MD5(body.query).toString()

  var entry = {
    query: body.query,
    response: await serializeResponse(response),
    timestamp: Date.now(),
  }
  set(id, entry, store)
}

async function getCache(request) {
  let data
  try {
    let body = await request.json()
    let id = MD5(body.query).toString()
    data = await get(id, store)
    if (!data) return null

    // Check cache max age.
    let cacheControl = request.headers.get('Cache-Control')
    let maxAge = cacheControl ? parseInt(cacheControl.split('=')[1]) : 3600
    if (Date.now() - data.timestamp > maxAge * 1000) {
      console.log(`Cache expired. Load from API endpoint.`)
      return null
    }

    console.log(`Load response from cache.`)
    return new Response(JSON.stringify(data.response.body), data.response)
  } catch (err) {
    return null
  }
}

async function getPostKey(request) {
  let body = await request.json()
  return JSON.stringify(body)
}